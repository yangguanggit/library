1.php运行模式
	(1)cli：command line interface命令行模式
	(2)cgi：common gateway interface通用网关接口（收到请求时新建进程处理请求，处理结束返回结果释放进程）
	(3)fast-cgi：常驻型cgi（保留一定数量进程常驻，收到请求时直接处理并返回结果），fpm：fast-cgi process manager
	(4)web模块：web服务器通过加载模块方式运行，如apache
	(5)isapi：internet server application program interface，如iis（php5.3后不支持）

2.php运行原理
	(1)php三个模块
		内核：负责处理请求、文件流、错误处理等
		zend引擎：负责将源文件转换成机器语言并在虚拟机上运行，内存的分配管理，提供一些api供外部调用
		扩展层：负责执行一些特定操作的一组函数、类库
	(2)php执行流程
		扫描：将php代码转换成语言片段token
		解析：将token转换成简单而有意义的表达式
		编译：将表达式编译成opcode
		执行：zend虚拟机上顺序执行opcode，从而实现php脚本功能

3.php安装扩展
	(1)yum、apt-get等包管理软件安装
	(2)pecl、pear工具安装
	(3)phpize编译安装
		下载扩展安装包并解压，切换到安装包目录
		phpize（准备：phpize脚本调用autoconf命令准备编译环境，根据config.m4文件生成configure配置脚本文件）
		./configure（配置：检测系统环境，配置选项，生成make编译脚本文件）
		make（编译：分别编译源文件集中到一个.so可执行文件）
		make install（安装：复制编译出的.so文件至php扩展目录）
		编辑php.ini添加扩展并重启web服务器（php -m查看所有已安装扩展）

4.进程和线程
	(1)进程：程序在特定数据集合上动态执行的过程，包含程序、数据、进程控制块三要素
	(2)线程：程序执行中一个单一的顺序控制流程，包含线程id、当前指令指针、寄存器堆栈三要素
	(3)区别
		一个进程可以包含多个线程
		进程是操作系统分配资源的最小单位，线程是程序运行的最小单位
		进程之间相互独立，同一进程内多个线程共享进程资源
		线程上下文切换效率高于进程

5.进程间通信
	(1)管道（pipe）：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用，进程的亲缘关系通常是指父子进程关系
	(2)有名管道（named pipe）：有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信
	(3)信号量（semophore）：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段
	(4)消息队列（message queue）：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点
	(5)信号（sinal）：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生
	(6)共享内存（shared memory）：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的IPC方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信
	(7)套接字（socket）：套接字也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信

6.线程锁：线程访问同一资源控制
	(1)二元信号量：只能被一个线程独占的资源
	(2)多元信号量：允许多个线程同时访问的资源
	(3)互斥量：只能被一个线程独占，加锁和解锁必须是同一个线程
	(4)临界区：只能被一个线程独占，加锁和解锁必须是同一个线程，进程内部
	(5)读写锁：读锁是共享锁，写锁是独占锁

7.http协议
	(1)http请求
		请求行：请求方法 请求url 协议 协议版本
		请求头：host、user-agent、accept选项、cookie、connection、cache-control等
		空白行
		请求数据
	(2)http响应
		响应行：协议 协议版本 状态码
		响应报文：各种header头
		空白行
		响应正文：页面输出内容

8.session原理
	(1)session文件保存在服务器，session文件名由前缀和session_id组成
	(2)执行session_start()函数时判断请求cookie有无session_id决定打开或新建对应session文件同时会有一定几率触发session垃圾回收机制
	(3)session_id通过http请求cookie在客户端和服务器间传送，同一会话重用同一个session文件，session文件默认在客户端没有交互24分钟以后失效
	(4)自动启用session、session存储方式和垃圾回收机制触发几率等选项可以在php.ini文件中配置

9.thinkphp和yii区别
	(1)yii完全面向对象实现，学习需要一定基础，thinkphp包含一些常用字母函数使用方便，容易学习
	(2)yii封装了很多常用功能组件，组建的使用和扩展都非常方便
	(3)yii缓存功能强大，ar、arr方便操作数据库

10.高并发大流量网站优化方法
	(1)升级服务器硬件
	(2)页面静态化
	(3)使用redis、memcached添加缓存
	(4)优化数据库操作
	(5)使用cdn内容分发网络
	(6)分布式布局，动静分离
	(7)控制大文件下载，防止外链

11.数据库优化方法
	(1)表的设计合理化（符合3NF）
	(2)添加适当的索引（普通索引、主键索引、唯一索引、全文索引）
	(3)分表技术（水平分表、垂直分表）
	(4)读写分离
	(5)存储过程（模块化编程，可以提高速度）
	(6)mysql配置优化（配置最大并发数、缓存大小）
	(7)mysql服务器硬件升级
	(8)定时清除不需要的数据、定时进行碎片整理（myisam）

12.数据每天十万增量优化方法
	(1)拆分表

13.分布式系统如何实现数据实时同步
	(1)rsync定时同步

14.商品抢购，保证商品个数不溢出
	(1)数据库表锁/行锁，避免数据同时操作
	(2)利用文件排它锁，每次操作数据库时检查文件锁状态，如果未加锁则加锁并操作数据库，否则阻塞
	(3)加载商品数据到redis队列，操作完成后写回数据库

15.存储过程

16.cdn内容分发网络

17.编译缓存和查询缓存

18.单用户登录实现
	(1)用户表添加字段，保存在线状态和session_id，非法退出的，根据活动时效决定是否允许后面的用户登陆
		判断时效：
		$sessionPath = session_save_path();
		$sessionFile = $sessionPath.'/sess_'.$dbSessionId;
		$activeTime = file_exists($sessionFile) ? (int)filemtime($sessionFile) : 0;
		if(time()-$activeTime > 30*60){
			// 30分钟时效登陆
		}
		用户每次活动时，页面添加代码确保每次活动后，对应的session文件都被修改，就没必要每次都去操作数据库
		$_SESSION['activeTime'] = time();

19.单点登录实现

20.状态机

21.restful